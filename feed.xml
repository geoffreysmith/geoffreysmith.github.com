<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2013-07-15T00:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Adding custom languages / regions to Sitecore</title>
    <link rel="alternate" href="/adding-regions-to-sitecore.html"/>
    <id>/adding-regions-to-sitecore.html</id>
    <published>2013-07-15T00:00:00Z</published>
    <updated>2013-07-15T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Often times, with multi-lingual sites, a company&amp;rsquo;s region is not based on geographic regions. Usually these are based on sales territories and we often find ourselves
defining regions as &amp;ldquo;English - Southeast Asia&amp;rdquo; that need their own special languages. Sitecore builds regions off Windows&amp;#39; list of cultures, to add a new region within
Sitecore we first need to add a region to Windows. Alex Shyba provides a great &lt;a href="http://marketplace.sitecore.net/en/Modules/Custom_Language_Registration.aspx"&gt;Custom Language Registration&lt;/a&gt;
utility, that does the job. Unfortunately, this adds a manual step into my wonderful one-click deployment process. Anything manual adds error, so let&amp;rsquo;s do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Before App_Start, check if the language or region exists on the current environment&lt;/li&gt;
&lt;li&gt;If not, add the region&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Arguably this should be part of a build process, but I found doing this in Powershell more cumbersome than simply writing C# code. The process, however, is the same. Let&amp;rsquo;s use 
&lt;a href="https://github.com/davidebbo/WebActivator"&gt;WebActivator&lt;/a&gt; to create a method that starts before the application spins up to do this:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;span class="na"&gt;[assembly: WebActivatorEx.PreApplicationStartMethod(typeof(MyProject.Web.App_Start.RegisterLanguages), &amp;quot;Register&amp;quot;)]&lt;/span&gt;
&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;MyProject.Web.App_Start&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RegisterLanguages&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;IsCultureExist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;en-SEA&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;cib&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;CultureAndRegionInfoBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;en-SEA&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CultureAndRegionModifiers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;cib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;LoadDataFromCultureInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;CultureInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;en-US&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
            &lt;span class="n"&gt;cib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;LoadDataFromRegionInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;RegionInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;en-US&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
            &lt;span class="n"&gt;cib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CultureEnglishName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;English (Southeast Asia)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;cib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CultureNativeName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;English (Southeast Asia)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;cib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RegionEnglishName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;English (Southeast Asia)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;cib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RegionNativeName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;English (Southeast Asia)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;cib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;    
&lt;/pre&gt;
&lt;p&gt;That&amp;rsquo;s it! Make sure Include\LanguageDefinitions.config is updated to include the new region. This also requires the AppPool user has access to the &amp;ldquo;C:\Windows\Globalization&amp;rdquo; directory
as Windows writes the custom culture files here.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Sitecore Glass Mapper and Castle's DynamicProxy</title>
    <link rel="alternate" href="/castle-proxy-sitecore-glass.html"/>
    <id>/castle-proxy-sitecore-glass.html</id>
    <published>2013-06-25T00:00:00Z</published>
    <updated>2013-06-25T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I recently came across a case where it appeared Sitecore Glass was not correctly mapping
lazy loaded objects:&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Car&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Make&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Model&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Link&lt;/span&gt; &lt;span class="n"&gt;Website&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Wheel&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Wheels&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;        
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Wheel&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Make&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Model&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Position&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;All of Car&amp;rsquo;s fields populated correctly except the multilist field, Wheels. The problem 
(correctly outlined in Glass documentation) are the reference types and Glass Sitecore fields
are mapped when the item is loaded. Collections are lazy loaded using &lt;a href="http://docs.castleproject.org/Tools.DynamicProxy.ashx"&gt;Castle&amp;rsquo;s DynamicProxy&lt;/a&gt;
and need to be marked as virtual to initiate loading, see 
&lt;a href="https://github.com/mikeedwards83/Glass.Mapper/blob/master/Source/Glass.Mapper/Pipelines/ObjectConstruction/Tasks/CreateConcrete/LazyObjectProxyHook.cs"&gt; the LazyObjectProxyHook&lt;/a&gt;
class for the implementation.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Sitecore 6.6 MVC and Dynamic Placeholders</title>
    <link rel="alternate" href="/sitecore-dynamic-placeholders.html"/>
    <id>/sitecore-dynamic-placeholders.html</id>
    <published>2013-04-17T00:00:00Z</published>
    <updated>2013-04-17T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Sitecore&amp;rsquo;s template processing is great and flexible, but has some severe limitations out of the box. The most 
glaring of these is the inability for Sitecore to handle certain types of complex content types. For example,
nearly every site I&amp;rsquo;ve encountered hash a tabbed FAQ section. This would entail adding a &amp;ldquo;tab&amp;rdquo; placeholder to a page
and allow Page Editor to add a rendering or sublayout to this section. This works great, except tabbed content presupposes
different content per tab. For example, we might have the following tabs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Offices in North America&lt;/li&gt;
&lt;li&gt;Offices in South America&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In Sitecore I want the content author to add any number of regions if the need arises, either different contintents 
or arbitrary regions (Offices on the East Coast), the end result is that I do not or should not know the number of tabs.
This is fine if I want each tab to contain a very generic field such as &amp;ldquo;rich text,&amp;rdquo; which is usually not possible or 
ideal. I want the user to add a tab, then add individual offices to that tab and not just in a big content block.&lt;/p&gt;

&lt;p&gt;Out of the box, this is not possible if we do not know the number of unique tabs. The &amp;ldquo;offices&amp;rdquo; placeholder in each tab
must be unique or Sitecore&amp;rsquo;s template processing will simply render the same content for every tab. It will find the &amp;ldquo;offices&amp;rdquo;
key and put any renderings with &amp;ldquo;offices&amp;rdquo; as the placeholder key in that placeholder. This will not work for our use case.&lt;/p&gt;

&lt;p&gt;This is where I discovered &lt;a href="http://stackoverflow.com/a/15135796/193495"&gt;Duston&amp;rsquo;s &lt;/a&gt; Stackoverflow answer
to create placeholders on the fly. The general flow is simple:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Define a dynamic placeholder with a friendly name,  &amp;ldquo;offices.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;The dynamic placeholder code will take the parent datasource&amp;rsquo;s GUID and and append it to the generic name&lt;/li&gt;
&lt;li&gt;Any children in that rendering will be associated to that parent rendering.&lt;/li&gt;
&lt;li&gt;As the placeholder id for a rendering is denormalized, there&amp;rsquo;s no restrictions or validations on what a placeholder
must be, it does not have to be previously be defined in Sitecore.&lt;/li&gt;
&lt;li&gt;If the parent is deleted, Sitecore retains the renderings with placeholder keys that no longer exist. They will not
show up on the page, but they&amp;rsquo;ll live in the item&amp;rsquo;s renderings (Presentation Details) until updated or deleted manually.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The drawbacks aren&amp;rsquo;t severe, but they are contradictory to how other items exist in Sitecore. If a parent is deleted,
the children are removed and not left in an orphaned state. The code could be updated to update child renderings, or, preferably a
simple script could be run on a regular basis that deals with orphaned renderings regardless of the cause.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Build and deployment with Sitecore and Hedgehog TDS</title>
    <link rel="alternate" href="/sitecore-tds.html"/>
    <id>/sitecore-tds.html</id>
    <published>2013-04-15T00:00:00Z</published>
    <updated>2013-04-15T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;One of the harder concepts to grasps for the Sitecore developer unaquainted
to working in team&amp;rsquo;s is an essential Sitecore tool, Hedgehog&amp;rsquo;s 
&lt;a href="http://www.hhogdev.com/Products/Team-Development-for-Sitecore/Overview.aspx"&gt;Team Development for Sitecore&lt;/a&gt;
TDS is best described as a migrations utility, similar to ActiveRecord&amp;rsquo;s Migrations or the multitude of other migrations utilities.
Sitecore&amp;rsquo;s data structure, with a few caveats, is a document based database. The schema
to Sitecore&amp;rsquo;s database doesn&amp;rsquo;t change when we add new data types and there&amp;rsquo;s no relational
constraints or hallmarks of a relational database. This is why I find calling projects
like &lt;a href="https://github.com/Velir/Custom-Item-Generator"&gt;Custom Item Generator&lt;/a&gt;, and 
&lt;a href="https://github.com/Glass-lu/Glass.Sitecore.Mapper"&gt;Sitecore.Glass.Mapper&lt;/a&gt; an ORM. There&amp;rsquo;s
no relational-object mismatch these are simply mappers to generic Sitecore objects.
an essential product for any Sitecore developer. It is as close as we&amp;rsquo;ll
get to a database migrations
utility for document oriented databases like Sitecore. N.B. that the data structure
is so simple for items inside Sitecore that creating a dataprovider is a relatively
&lt;a href="https://github.com/pbering/SitecoreData"&gt;simple task&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;*.scproj, the Build and Deployment Workflow&lt;/h2&gt;

&lt;p&gt;Hedgehog created a &lt;a href="http://msdn.microsoft.com/en-us/library/bb166376(VS.100).aspx"&gt;custom project type&lt;/a&gt;
, scproj, for managing Sitecore items from managing and building Sitecore projects. When building, this
invokes &amp;lsquo;C:\Program Files (x86)\MSBuild\HedgehogDevelopment\SitecoreProject\v9.0\HedgehogDevelopment.SitecoreProject.targets&amp;rsquo;
which builds the following workflow for lower environments:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Build and create project artifacts&lt;/li&gt;
&lt;li&gt;Perform post-build steps, such as replacing config files&lt;/li&gt;
&lt;li&gt;Install Sitecore connector (the source of which is here: C:\Program Files (x86)\Hedgehog Development\Team Development for Sitecore (VS2010)\PackageInstaller\PackageInstaller)&lt;/li&gt;
&lt;li&gt;Deploy, or deserialize the items to the database&lt;/li&gt;
&lt;li&gt;Perform any post-deploy steps&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For higher environments, unfortunately, system administrators generally want a more manual deployment process.
This is the cost of working in an enterprise environment, but with a few config changes, the workflow may be
adjusted:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Build and create project artifacts&lt;/li&gt;
&lt;li&gt;Perform post-build steps&lt;/li&gt;
&lt;li&gt;Generate Sitecore package for deployment&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;From here you can either hand off the entire Sitecore package, with code deployment, or the build artifacts and the
*.scitems file separately.&lt;/p&gt;

&lt;p&gt;The only problem with the *.scproj project template is that the build, deployment and Sitecore item settings
reside in the same file. With large content trees and multiple deployment environments, this can quickly bloat
and become a nightmare during merges.&lt;/p&gt;

&lt;h2&gt;Simple config samples&lt;/h2&gt;

&lt;p&gt;I prefer to keep my deploments as simple as possible and try to create a universal build step for the web project:&lt;/p&gt;
&lt;pre class="highlight xml"&gt;  &lt;span class="nt"&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;Configuration&lt;/span&gt; &lt;span class="na"&gt;Condition=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; &amp;#39;$(Configuration)&amp;#39; == &amp;#39;&amp;#39; &amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/Configuration&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;Platform&lt;/span&gt; &lt;span class="na"&gt;Condition=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; &amp;#39;$(Platform)&amp;#39; == &amp;#39;&amp;#39; &amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;AnyCPU&lt;span class="nt"&gt;&amp;lt;/Platform&amp;gt;&lt;/span&gt;
    ProjectGuid&amp;gt;{61236e89-492e-454f-868e-f9126572c77a}&lt;span class="nt"&gt;&amp;lt;/ProjectGuid&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;TargetFrameworkVersion&amp;gt;&lt;/span&gt;v4.0&lt;span class="nt"&gt;&amp;lt;/TargetFrameworkVersion&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;SourceWebProject&amp;gt;&lt;/span&gt;{2E70A40A-85A8-4A1E-9A5B-E23935372C71}|SampleTDSProject.Web\SampleTDSProject.Web.csproj&lt;span class="nt"&gt;&amp;lt;/SourceWebProject&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;SourceWebPhysicalPath&amp;gt;&lt;/span&gt;..\SampleTDSProject.Web\&lt;span class="nt"&gt;&amp;lt;/SourceWebPhysicalPath&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;SourceWebVirtualPath&amp;gt;&lt;/span&gt;/SampleTDSProject.Web.csproj&lt;span class="nt"&gt;&amp;lt;/SourceWebVirtualPath&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This will create the build artifacts for any target, and create the debug symbols which we can
take out in a later step of the process. For individual environments, I create a property group
targeting the various environments:&lt;/p&gt;
&lt;pre class="highlight xml"&gt;  &lt;span class="nt"&gt;&amp;lt;PropertyGroup&lt;/span&gt; &lt;span class="na"&gt;Condition=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; &amp;#39;$(Configuration)&amp;#39; == &amp;#39;SampleTDSProject.local&amp;#39; &amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;DebugSymbols&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/DebugSymbols&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;RecursiveDeployAction&amp;gt;&lt;/span&gt;Ignore&lt;span class="nt"&gt;&amp;lt;/RecursiveDeployAction&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;SitecoreDeployFolder&amp;gt;&lt;/span&gt;C:\_SITES\sampletdsproject.local\Website&lt;span class="nt"&gt;&amp;lt;/SitecoreDeployFolder&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;SitecoreAccessGuid&amp;gt;&lt;/span&gt;8536b728-2fd4-4cb4-9861-1494fd8c4372&lt;span class="nt"&gt;&amp;lt;/SitecoreAccessGuid&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;SitecoreWebUrl&amp;gt;&lt;/span&gt;http://local.sampletdsproject.com&lt;span class="nt"&gt;&amp;lt;/SitecoreWebUrl&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;InstallSitecoreConnector&amp;gt;&lt;/span&gt;True&lt;span class="nt"&gt;&amp;lt;/InstallSitecoreConnector&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;OutputPath&amp;gt;&lt;/span&gt;.\VML.enhance.local\&lt;span class="nt"&gt;&amp;lt;/OutputPath&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;They&amp;rsquo;re a variety of options surrounding the deployment of the Sitecore options. The
&lt;a href="http://www.hhogdev.com/~/media/Files/Products/Team_Development/TDS-Sample.zip"&gt;sample project&lt;/a&gt;
outlines the most common options. Either build within Visual Studio or use msbuild from the cli:&lt;/p&gt;

&lt;p&gt;C:\Windows\Microsoft.NET\Framework\v4.0.30319\msbuild c:_application\SampleTdsProject.TDS\SampleTdsProject.scproj /p:Configuration=SampleTDSProject.local&lt;/p&gt;
</content>
  </entry>
</feed>
